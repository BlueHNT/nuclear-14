// Vertex Shader
void vertex() {
    VERTEX = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX_POS, 1.0);
    UV = VERTEX_UV0;
}

// Fragment Shader
uniform sampler2D SCREEN_TEXTURE;
uniform sampler2D noiseTex; 
uniform sampler2D maskTex; 
uniform highp float TIME; // elapsedTime
uniform highp float luminanceThreshold; // 0.2
uniform highp float colorAmplification; // 4.0
uniform highp float effectCoverage; // 0.5

void fragment() {
    highp vec4 finalColor;

    if (FRAGCOORD.x < effectCoverage) {
        highp vec2 uv;           
        uv.x = 0.4 * sin(TIME * 50.0);                                 
        uv.y = 0.4 * cos(TIME * 50.0);                                 

        highp float m = texture(maskTex, FRAGCOORD.xy).r;
        highp vec3 n = texture(noiseTex, FRAGCOORD.xy * 3.5 + uv).rgb;
        highp vec3 c = texture(SCREEN_TEXTURE, FRAGCOORD.xy + n.xy * 0.005).rgb;
  
        highp float lum = dot(vec3(0.30, 0.59, 0.11), c);
        if (lum < luminanceThreshold) {
            c *= colorAmplification;
        }
  
        highp vec3 visionColor = vec3(0.1, 0.95, 0.2);
        finalColor.rgb = (c + n * 0.2) * visionColor * m;
    } else {
        finalColor = texture(SCREEN_TEXTURE, FRAGCOORD.xy);
    }

    COLOR = vec4(finalColor.rgb, 1.0);
}